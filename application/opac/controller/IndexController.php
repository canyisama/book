<?php
/**
 * Created by PhpStorm.
 * User: void
 * Date: 2018/5/5
 * Time: 14:56
 */

namespace app\opac\controller;


use app\admin\model\Book;
use app\admin\model\Clc;
use app\admin\model\Dck;
use app\admin\model\Doctype;
use app\admin\model\Dzgl;
use app\admin\model\Lend;
use app\admin\model\Mt;
use app\admin\model\Tsg;
use app\admin\model\TsgSite;
use app\opac\model\BookCollect;
use think\Cookie;
use think\Lang;

class IndexController extends BaseController
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        Lang::load(APP_PATH . 'lang' . DS . 'zh-cn' . DS . 'opac/index.php');
    }

    /**
     * @return \think\response\View
     * 检索首页
     */
    public function indexAction()
    {
        return view();
    }

    public function searchAction()
    {
        //reg

        $fields = $this->_get_fields();
        $order_list = $this->_get_order_zds();
        $this->assign("fields", $fields);
        $this->assign("order_list", $order_list);
        if (!$this->isAjax) {
            $where = array();

            $condition = [];
            $condition_or = [];

            $title = input('title','');

            if ($title){
                $condition['title'][] = ['like',['%'.$title.'%']];
            }

            $zd_tmp = input('zd/a', []);
            $val_tmp = input('val/a', []);
            $logic_tmp = input('l/a', []);

            foreach ($zd_tmp as $key => $item) {
                $zd = isset($item) ? trim($item) : '';
                $val = isset($val_tmp[$key]) ? trim($val_tmp[$key]) : '';
                if ($key !== 0){
                    $logic = isset($logic_tmp[$key-1]) ? strtoupper(trim($logic_tmp[$key-1])) : 'AND';
                }else{
                    $logic = '';
                }
                if (!empty($zd) && !empty($val) && isset($fields[$zd])) {
                    $where[] = array("zd" => $zd, "val" => $val, "logic" => $logic);
                }
            }


            foreach ($where as $value) {
                switch ($value['logic']) {
                    case 'AND':
                        isset($condition[$value['zd']])
                            ? $condition[$value['zd']][0][1][] = '%'.$value['val'].'%'
                            : $condition[$value['zd']][] = ['like', ['%' . $value['val'] . '%']];
//                        $condition[$value['zd']] = ['like', ['%' . $value['val'] . '%']];
                        break;
                    case 'OR':
                        isset($condition_or[$value['zd']])
                            ?$condition_or[$value['zd']][1][] .= '%'.$value['val'].'%'
                            : $condition_or[$value['zd']] = ['like', ['%' . $value['val'] . '%']];
//                        $condition_or[$value['zd']] = ['like', ['%' . $value['val'] . '%']];
                        break;
                    case 'XOR':
                        if(isset($condition[$value['zd']])){
                            array_push($condition[$value['zd']], ['not like', ['%' . $value['val'] . '%']]);
//                            $condition[$value['zd']] .= ['not like', ['%' . $value['val'] . '%']];
                        }else{
                            $condition[$value['zd']][] = ['not like', ['%' . $value['val'] . '%']];
                        }
//                        $condition[$value['zd']] = ['not like', ['%' . $value['val'] . '%']];
                        break;
                    default:
                        $condition[$value['zd']][] = ['like',['%'.$value['val'].'%']];
                        break;
                }
            }

            $clc = input('clc','');

            if (!empty($clc)){
                isset($condition['clc'])
                    ? $condition['clc'][0][1][] = '%'.$clc.'%'
                    : $condition['clc'][] = ['like', ['%' . $clc . '%']];
//                $condition['clc'][] = ['like',['%'.$clc.'%']];
            }

            $pubdate_beg = input('pubdate_beg/d', 0);
            $pubdate_end = input('pubdate_end/d', 0);
            if ($pubdate_beg && $pubdate_end) {
                $pubdate_lt = ($pubdate_beg < $pubdate_end ? $pubdate_beg : $pubdate_end);
                $pubdate_gt = ($pubdate_end < $pubdate_beg ? $pubdate_beg : $pubdate_end);

                $condition['pubdate'] = ['between', [$pubdate_lt, $pubdate_gt]];
            } else if ($pubdate_beg) {
                $condition['pubdate'] = ['>', $pubdate_beg];
            } else if ($pubdate_end) {
                $condition['pubdate'] = ['<', $pubdate_end];
            }

            if (input('date_val')) {
                $date_end = time();
                $date_beg = $date_end - (intval(input('date_val')) * 86400);
                $date_end += 86400;
                $condition['catatime'] = ['between',[$date_beg,$date_end]];
            }

            if (cookie('tsg_code')) {
                $condition['tsg_code'] = cookie('tsg_code');
            }

            $order_zd = input('order_zd') ? trim(input('order_zd')) : 'book_id';
            $order_seq = input('order_seq') && in_array(input('order_seq'), array('asc', 'desc')) ? trim(input('order_seq')) : 'asc';

            $this->assign('order_zd',$order_zd);
            $this->assign('order_seq',$order_seq);

            if (!empty($condition) || !empty($condition_or)) {
                cache('condition', $condition, 3600);
                cache('condition_or', $condition_or, 3600);
                cache('order', $order_zd . ' ' . $order_seq, 3600);
            }
        }else {

            $start_time = time();

            $condition = cache('condition');
            $condition_or = cache('condition_or');

            $order = cache('order');
            $search_type = input('search_type/d',0);

//            $check_field = input('check_field');
//            $check_val = input('check_val');
            $is_check = input('is_check/d', 0);

//            if ($check_field){
//                isset($condition[$check_field])
//                    ? array_push($condition[$check_field], ['in', $check_val])
//                    : $condition[$check_field][] = ['in', $check_val];
//            }
            //0 --- 从查询结果中查询  || !0 --- 新的查询
            if ($search_type !== 0){
                $condition = '';
                $condition_or = '';
            }
            $param = $this->getQueryParams();

            if ($param->order != '0'){
                $order = $param->order;
            }
            if ($param->search){
                $val = '';

                foreach ($param->search as $search ) {
                    if ($search['field'] == 'zd[]') {
                        $zd = $search['value'];
                    } else if ($search['field'] == 'val[]') {
                        $val = $search['value'];
                    }else if($is_check && $search['field']){
                        if (isset($condition[$search['field']])){
                            if($condition[$search['field']][0][0] == 'in'){
                                $condition[$search['field']][0][1][] = $search['value'];
                            }else if ($condition[$search['field']][1][0] == 'in'){
                                $condition[$search['field']][1][1][] = $search['value'];
                            }else{
                                $condition[$search['field']][] = ['in',[$search['value']]];
                            }
                        }else{
                            $condition[$search['field']][] = ['in',[$search['value']]];
                        }
                    }
                }

                if ($val) {
                    if (isset($condition[$zd]) && $condition[$zd][0][0] != 'in'){
                        if (!in_array(['%' . $val . '%',$val], $condition[$zd][0][1])){
                            $condition[$zd][0][1][] .= '%' . $val . '%';
                        }
                    }else{
                        $condition[$zd][] = ['like', ['%' . $val . '%']];
                    }
                }
            }

            if ($is_check === 0){
                cache('condition',$condition,3600);
                cache('condition_or',$condition_or,3600);
            }

            $fields = 'isbn,book_id,clc,mt_id,tsg_code,catatime,title,firstauthor,publisher,pubdate,subject,price_ms';
//            $fields_group = 'clc,mt_id,tsg_code,firstauthor,publisher,pubdate,subject,count(book_id) as num';

            $data_list = Book::field($fields)->where($condition)->whereOr($condition_or)->order($order)->limit($param->limit)->select();

            $tsg_list = Book::field('tsg_code,count(book_id) as num')->where($condition)->whereOr($condition_or)->group('tsg_code')->select();
            $mt_list = Book::field('mt_id,count(book_id) as num')->where($condition)->whereOr($condition_or)->group('mt_id')->select();
            $firstauthor_list = Book::field('firstauthor,count(book_id) as num')->where($condition)->whereOr($condition_or)->group('firstauthor')->select();
            $publisher_list = Book::field('publisher,count(book_id) as num')->where($condition)->whereOr($condition_or)->group('publisher')->select();
            $pubdate_list = Book::field('pubdate,count(book_id) as num')->where($condition)->whereOr($condition_or)->group('pubdate')->select();
            $subject_list = Book::field('subject,count(book_id) as num')->where($condition)->whereOr($condition_or)->group('subject')->select();

            $count = Book::where($condition)->whereOr($condition_or)->count();

            if ($data_list){
                $mt_map = Mt::getMap('mt_id', 'mt_code');
                $tsg_map = Tsg::getMap('tsg_code', 'tsg_name');
                foreach ($data_list as &$item){
                    $item['mt_name'] = $mt_map[$item['mt_id']];
                    $item['tsg_code'] = $item['tsg_code'].'|'.$tsg_map[$item['tsg_code']];
                }
                unset($item);
            }
            $end_time = time();
            $time = $end_time-$start_time;
            $data['time'] = $time;
            $data['tsg_code'] = $tsg_list;
            $data['mt_id'] = $mt_list;
            $data['firstauthor'] = $firstauthor_list;
            $data['publisher'] = $publisher_list;
            $data['pubdate'] = $pubdate_list;
            $data['subject'] = $subject_list;
            $data['is_check'] = $is_check;

//            print_r($condition);exit();
            return $this->echoPageData($data_list,$count,$data);
        }
        return view();
    }


    public function convWhereToStr($where, $map)
    {
        $groupWhere = $where["__group__"];
        unset($where["__group__"]);
        if (empty($where) || !is_array($where)) {
            return "";
        }

        $w = $where;

        if (empty($w)) {
            return "";
        }

        $logic_map = array("AND" => " 并且 ", "OR" => " 或者 ", "XOR" => " 非 ");
        $g = array();
        $g["beg"] = $groupWhere[0];
        $g["end"] = $groupWhere[1];
        $len = count($w);
        $is_group = !empty($g) && (0 <= $g["beg"]) && ($g["beg"] < ($len - 1)) && ($g["end"] <= $len - 1) && ($g["beg"] < $g["end"]);
        $w1 = array();
        $i = 1;

        foreach ($w as $item ) {
            if ($i == 1) {
                $str_tmp = "【{$map[$item["zd"]]}={$item["val"]}】";
                if ($is_group && ($g["beg"] == 0)) {
                    $str_tmp = "(" . $str_tmp;
                }

                $w1[] = $str_tmp;
            }
            else {
                $lzd = strtoupper($item["logic"]);
                $logic = (isset($logic_map[$lzd]) ? $logic_map[$lzd] : " 并且 ");
                $str_tmp = "【{$map[$item["zd"]]}={$item["val"]}】";
                if ($is_group && ($g["beg"] == $i - 1)) {
                    $str_tmp = $logic . "(" . $str_tmp;
                }
                else {
                    if ($is_group && ($g["end"] == $i - 1)) {
                        $str_tmp = $logic . $str_tmp . ")";
                    }
                    else {
                        $str_tmp = $logic . $str_tmp;
                    }
                }

                $w1[] = $str_tmp;
            }

            $i++;
        }

        $re_str = implode("", $w1);
        return $re_str;
    }

    /**
     * 高级检索
     */
    public function advancedAction()
    {
        $fields = $this->_get_fields();
        $this->assign("fields", $fields);
        $order_list = $this->_get_order_zds();
        $this->assign("order_list", $order_list);

        $doctype_list = Doctype::get_list();

        foreach ($doctype_list as $key => $item ) {
            $doctype_list[$key]["mdt_name"] = sprintf("%u", crc32($item["dt_name"]));

        }
        $this->assign("doctype_list", $doctype_list);
        $pubdate_list = array();
        $year = intval(date("Y"));

        for ($i = 0; $i < 50; $i++) {
            $year_tmp = $year - $i;
            $pubdate_list[$year_tmp] = $year_tmp;
        }

        $this->assign("pubdate_list", $pubdate_list);
        return view();
    }



    /**
     * 图书收藏
     */
    public function book_collectAction()
    {
        if (!$this->_dz_info) {
            $this->error('请先登录再收藏');
        }

        $book_id = input('get.book_id/d')?:0;

        if (!$book_id) {
            $this->error('图书ID不能为空');
        }

        $mod_book_collect = new BookCollect();
        $is_success = $mod_book_collect->collect($this->_dz_info["dz_id"], $book_id);

        if ($is_success === false) {
            $this->error('图书收藏失败:'.$mod_book_collect->getError());
        }

        $this->success('图书收藏成功');
    }

    /**
     * clc数据显示
     */
    public function getJsonListAction()
    {
            $clc_str = input('clc', '');
            if (!$clc_str) {
                return;
            }
            $book_list = array();

            if ($clc_str) {
                $params = $this->getQueryParams();//分页,排序,查询参数

                $mod_book = d("app\admin\model\Book");
                $where = "where lib_index_clc_order.val like '".$clc_str."%'";
//                $where["lib_index_tsg_code.val"] = cookie('tsg_code');
//                $where["lib_index_clc_order.val"] = array("like", $clc_str . "%");

                if (cookie('tsg_code')){
                    $where .= ' and lib_index_tsg_code.val='.cookie('tsg_code');
                }

                $table_str = "lib_index_clc_order INNER JOIN lib_index_tsg_code on lib_index_clc_order.bid=lib_index_tsg_code.bid ";


                $count_sql = "select count(*) as count from " . $table_str . $where;
                $select_sql = "select lib_index_clc_order.bid from " . $table_str . $where ." limit " . $params->limit;

                $count = $mod_book->query($count_sql);

                $count = $count ? $count[0]['count'] : 0;
                $bid_list = $mod_book->query($select_sql);

                $bid_arr = array();
                foreach ($bid_list as $item) {
                    $bid_arr[] = $item["bid"];
                }
                if ($bid_arr) {
                    $where_book = ["book_id" => ["in", $bid_arr]];
                    $book_id_str = implode(",", $bid_arr);
                    $book_list = $mod_book->where($where_book)->orderRaw("FIND_IN_SET(book_id,'$book_id_str')")->select();
                }
                return $this->echoPageData($book_list, $count);
            }

    }

    /**
     * @return \think\response\Json
     * 获取图书分类清单
     */
    public function getClcListAction()
    {
        $node_id = input('id/d');
        $clc_list = d("app\admin\model\Clc")->getListByParent($node_id);
        return json($clc_list);
    }

    /**
     * 分类检索页面
     * @return \think\response\View
     */
    public function clcAction()
    {
        $dt_list = Doctype::get_list();
        $fields = $this->_get_fields();
        $clc_list = Clc::getTopClcList();
        $this->getClcCnt($clc_list);

        foreach ($dt_list as $key => $item ) {
            $dt_list[$key]["mdt_name"] = sprintf("%u", crc32($item["dt_name"]));
        }

        $this->assign("dt_list", $dt_list);
        $this->assign("fields", $fields);
        $this->assign("clc_list", $clc_list);

        return view();
    }

    /**
     * @return \think\response\View
     * 新书通报页面
     */
    public function newbookAction()
    {

        $dt_list = Doctype::get_list();
        $fields = $this->_get_fields();
        $clc_list = Clc::getTopClcList();
        $this->getClcCnt($clc_list);

        foreach ($dt_list as $key => $item ) {
            $dt_list[$key]["mdt_name"] = sprintf("%u", crc32($item["dt_name"]));
        }

        foreach ($dt_list as $key => $item ) {
            $dt_name = crc32($item["dt_name"]);
            $dt_name = sprintf("%u", $dt_name);
            $doctype_list[$key]["mdt_name"] = $dt_name;
        }


        $this->assign("dt_list", $dt_list);
        $this->assign("fields", $fields);
        $this->assign("clc_list", $clc_list);

        return view();
    }

    public function book_viewAction()
    {
        $book_id = input('book_id/d',0);
        if (!$book_id){
            echo '<script type="text/javascript">alert("读书ID不存在"); window.close();</script>';
            exit();
        }
        $field = 'book_id,title,isbn,clc,abstract,pages,charts,size,subject,firstauthor,publisher,pubplace,pubdate,price_ms,bl_title,othertitle,fjno,fjtitle,';
        $field .="CONCAT(title,IF(bl_title!='','=',''),bl_title,IF(othertitle!='',':',''),othertitle,IF(fjno!='','.',''),fjno,IF(fjtitle!='',',',''),fjtitle) as title_all";
        $book_info = Book::field($field)->where(['book_id'=>$book_id])->find();
        if ($book_info["firstauthor"]) {
            $book_info["title_all"] .= "/{$book_info["firstauthor"]}";
        }
        $book_info['isbncode'] = $book_info['isbn'];
        $this->assign('info',$book_info);
        return view();
    }

    public function getDckListAction()
    {
        $book_id = input('book_id/d');
        $mod_dck = d("app\admin\model\Dck");
        $where = array();
        $where["book_id"] = $book_id;
        $where_str = 'book_id=' . $book_id;
        $tsg_code = 0;

        if (cookie('tsg_code')) {
            $tsg_code = cookie('tsg_code');
            $where["lib_dck.tsg_code"] = $tsg_code;
            $where_str .= ' and lib_dck.tsg_code=' . $tsg_code;

        }

        $where["dt"] = array("eq", Dck::DT_TYPE_BOOK);
        $where_str .= ' and dt=' . Dck::DT_TYPE_BOOK;
        $param = $this->getQueryParams();
        $order = $param->order;
        $fields = "dck_id,book_id,barcode,price,price_sum,lib_dck.tsg_code,tsg_code_has,calino,is_close,add_time,status,lib_dck.tsg_site_code,lt_type,site_name";
        //$dck_list = $mod_dck->table("lib_dck LEFT JOIN lib_tsg_site ON lib_dck.tsg_code=lib_tsg_site.tsg_code AND lib_dck.tsg_site_code=lib_tsg_site.tsg_site_code")->field($fields)->where($where)->order($order)->select();
        $select_sql = "select {$fields} from lib_dck 
                      left join lib_tsg_site ON lib_dck.tsg_code=lib_tsg_site.tsg_code AND lib_dck.tsg_site_code=lib_tsg_site.tsg_site_code
                      WHERE {$where_str}
                      ORDER BY {$order}";
        $dck_list = $mod_dck->query($select_sql);

        $count = count($dck_list);
//        $count = 0;
        $tsg_list = Tsg::getMap('tsg_code','tsg_name');
        $tsg_site_list = TsgSite::getMap('tsg_site_code','site_name',$tsg_code);

//        $tsg_site_list = TsgSite::field('tsg_site_code,site_name,tsg_code')->group('tsg_code')->select();

///        print_r($tsg_site_list);exit();
        foreach ($dck_list as $key => $item) {
            $item['tsg_code'] .= ' | ' . $tsg_list[$item['tsg_code']];
            $item['tsg_site_code'] .= ' | ' . $tsg_site_list[$item['tsg_site_code']];
            $item['tsg_code_has_show'] = $item['tsg_code_has']. ' | ' . $tsg_list[$item['tsg_code_has']];
            $item['add_time'] = fmt_date_time($item['add_time']);
            $dck_list[$key] = $item;
        }

        $chart_data = $this->_get_lend_chart($book_id);
//        $this->assign("list", $chart_data);

        $this->echoPageData($dck_list,$count,$chart_data);
    }

    public function _get_fields()
    {
        return array(
//            "allzd" => "全部字段",
            "title" => l("title"), "firstauthor" => l("author"), "clc" => l("clc"), "isbn" => l("isbn"), "publisher" => l("publisher"), "subject" => l("subject"));
    }

    public function _get_order_zds()
    {
        return array(
//            "weight" => "匹配度",
            "tsg_code" => "分馆代码",
//            "dt_name" => "图书类型",
            "mt_id" => "图书类型",
            "firstauthor" => l("author"), "clc" => l("clc"), "pubdate" => l("pubdate"), "publisher" => l("publisher"), "subject" => l("subject"));
    }

    /**
     * @param $book_id
     * @return array
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 图书借阅图表
     */
    public function _get_lend_chart($book_id)
    {
        $lend_where = array();
        $lend_where["book_id"] = $book_id;

        if (cookie('tsg_code')) {
            $lend_where["tsg_code"] = cookie('tsg_code');
        }

        $lend_list = Lend::field("FROM_UNIXTIME(add_time,'%Y') as lend_year,count(lend_id) as lend_cnt")->where($lend_where)->group("lend_year")->order("lend_year")->select();


        $list = [];
        $chart_data['field'] = ['lend_cnt'=>'次数'];
        //图表类型
        $list['chart'] = 'line';
        //图表标题
        $list['title'] = '本书借阅量分布图';

        foreach ($chart_data['field'] as $key => $value){
            $list['series'][$key]['name'] = $value;
            //隐藏所有y轴
            $list['type_field'][] = $key;
        }

        foreach ($lend_list as $key => $item){
            //x轴名称
            $list['xName'][] = $item['lend_year'];
            //数据格式化
            foreach ($list['type_field'] as $field){
                $list['series'][$field]['data'][] = floatval($item[$field]);
            }
        }
        unset($list['type_field']);

        $list['series'] = array_values($list['series']);


        return $list;
    }

    public function getClcCnt(&$clc_list)
    {
        import("Sphinx/Sphinx",EXTEND_PATH,'.class.php');
        $sph_obj = new \Sphinx();
        $client_obj = $sph_obj->clientObj;
        $clc_where = $this->get_clc_where();
        $where = $clc_where["where"];
        $filter_list = $clc_where["filter_list"];
        $filter_range = $clc_where["filter_range"];

        if (!empty($filter_list)) {
            $sph_obj->setFilter($filter_list);
        }

        if (!empty($filter_range)) {
            $sph_obj->setFilterRange($filter_range);
        }


        $options = $sph_obj->getOptions();

        if ($options["filter"]) {
            foreach ($options["filter"] as $key => $item ) {
                $client_obj->SetFilter($key, $item);
            }
        }

        if ($options["filter_range"]) {
            foreach ($options["filter_range"] as $key => $item ) {
                $client_obj->setFilterRange($key, $item["beg"], $item["end"]);
            }
        }

        $client_obj->SetLimits(0, 1, 1);

        foreach ($clc_list as $key => $item ) {
            $client_obj->AddQuery("@clc {$item["clc"]}", "*");
        }

        $data_list = $client_obj->RunQueries();

        foreach ($clc_list as $key => $item ) {
            $clc_list[$key]["cnt"] = $data_list[$key]["total_found"];
        }

        return NULL;
    }

    public function get_clc_where()
    {
        $fields = $this->_get_fields();
        $where = array();

        foreach (input('get.zd')?:[] as $key => $item ) {
            $zd_tmp = (isset($_GET["zd"][$key]) ? trim($_GET["zd"][$key]) : "");
            $val_tmp = (isset($_GET["val"][$key]) ? trim($_GET["val"][$key]) : "");
            $logic_tmp = (isset($_GET["l"][$key]) ? trim($_GET["l"][$key]) : "AND");
            if (!empty($zd_tmp) && !empty($val_tmp) && isset($fields[$zd_tmp])) {
                $where[] = array("zd" => $zd_tmp, "val" => $val_tmp, "logic" => $logic_tmp);
            }
        }

        if (isset($_GET["gwbeg"]) && isset($_GET["gwend"])) {
            $gwbeg = intval($_GET["gwbeg"]);
            $gwend = intval($_GET["gwend"]);
            if ((0 <= $gwbeg) && ($gwbeg < $gwend)) {
                $group_where = array($gwbeg, $gwend);
                $where["__group__"] = $group_where;
            }
        }

        $filter_list = array();
        $filter_map = array("dt_name" => "mdt_name", "tsg_code" => "mtsg_code", "clc" => "mclc", "firstauthor" => "mfirstauthor", "pubdate" => "mpubdate", "publisher" => "mpublisher", "subject" => "msubject");
        $pubdate_beg = (isset($_GET["pubdate_beg"]) ? intval($_GET["pubdate_beg"]) : 0);
        $pubdate_end = (isset($_GET["pubdate_end"]) ? intval($_GET["pubdate_end"]) : 0);
        if ($pubdate_beg && $pubdate_end) {
            $pubdate_lt = ($pubdate_beg < $pubdate_end ? $pubdate_beg : $pubdate_end);
            $pubdate_gt = ($pubdate_end < $pubdate_beg ? $pubdate_beg : $pubdate_end);

            for ($pubdate_arr = array(); $pubdate_lt <= $pubdate_gt; $pubdate_lt++) {
                $tmp_val = sprintf("%u", crc32($pubdate_lt));
                $pubdate_arr[] = $tmp_val;
            }

            $filter_list[$filter_map["pubdate"]] = $pubdate_arr;
        }

        foreach ($_GET as $key => $item ) {
            if (isset($filter_map[$key]) && !empty($item)) {
                $filter_list[$filter_map[$key]] = array(trim($item));
            }
        }

        if ($_COOKIE["curr_tsg_code"]) {
            if (isset($filter_map["tsg_code"])) {
                $tsg_code = crc32(trim($_COOKIE["curr_tsg_code"]));
                $tsg_code = sprintf("%u", $tsg_code);
                $filter_list[$filter_map["tsg_code"]] = array($tsg_code);
            }
        }

        $filter_range = array();

        if ($_GET["date_val"]) {
            $date_end = time();
            $date_beg = $date_end - (intval($_GET["date_val"]) * 86400);
            $date_end += 86400;
            $filter_range = array(
                "catatime" => array("beg" => $date_beg, "end" => $date_end)
            );
        }

        return array("where" => $where, "filter_range" => $filter_range, "filter_list" => $filter_list);
    }

}