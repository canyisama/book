<?php
/**
 * Created by PhpStorm.
 * User: void
 * Date: 2018/4/18
 * Time: 11:39
 */

namespace app\admin\controller;

use app\admin\model\LendReser;
use app\admin\model\Reser;
use think\Exception;
use app\admin\model\Book;
use app\admin\model\Dck;
use app\admin\model\Dzgl;
use app\admin\model\DzType;
use app\admin\model\Lend;
use app\admin\model\LtLog;
use app\admin\model\RoomLend;
use app\admin\model\Tsg;
use app\admin\model\TsgSite;
use think\Db;
use think\Lang;
use think\Loader;

/**
 * Class LendController
 * @package app\admin\controller
 * 借阅书籍 --- 借阅管理
 */
class LendController extends BaseController
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        Lang::load([APP_PATH . 'lang' . DS . 'zh-cn' . DS . 'home/lend.php']);
    }

    public function formatReturn($msg = '',$code = 0,$data = '')
    {
        $return = [
            'msg' => $msg,
            'code' => $code,
            'data'  => $data
        ];
        return $return;
    }
    /**
     * @return \think\response\View
     * 罚款超期页面
     */
    public function outNoticeAction()
    {
        return view('out_notice');
    }

    /**
     * @return \think\response\View
     * 当前借阅页面
     */
    public function indexAction()
    {
        $type = input('type/d') ?: 1;
        $this->assign('type',$type);
        return view();
    }

    /**
     * 历史借阅页面----重定向至当前借阅页面
     */
    public function index_historyAction()
    {
        return $this->redirect('index',['type'=>2]);
    }

    /**
     * 异步获取
     */
    public function getJsonListAction()
    {
        $type = input('type/d') ?: 0;
        $condition = ['tsg_code' => $this->adminInfo['tsg_code']];
        $condition['lend_status'] = 1;
        switch ($type){
            case 0 :
                $condition['must_time'] = ['< time',time()];
                break;
            case 2 :
                $condition['lend_status'] = 2;
                break;
            default :
                break;
        }

        $params = $this->getQueryParams();//分页,排序,查询参数
        if ($params->search) {
            foreach ($params->search as $search) {
                if ($search['field'] == 'must_time'){
                    $search['value'] = $search['value']*86400;
                    $condition[$search['field']] = ['< time',time()-$search['value']];
                }else if($search['field'] == 'add_time' || $search['field'] == 'end_time') {
                    $condition[$search['field']] = ['between time',[$search['value'],$search['value'].'+1 day']];
                }else{
                    $condition[$search['field']] = ['like', '%' . $search['value'] . '%'];
                }
            }
        }


        $list = Lend::getPageList($condition, $params->limit, $params->order);
        if ($type === 0){
            cache('timeout_data',$list,600);
        }
        $count = Lend::where($condition)->count();
        return $this->echoPageData($list, $count);
    }

    /**
     * 借阅信息异步获取
     */
    public function getLendJsonListAction()
    {
        $type = input('type/d') ?: 1;
        $dz_code = input('dz_code/d') ?: 0;
        $barcode = input('barcode/s') ?: '';
        $condition = [];
        $condition['lend_status'] = $type;
        $dz_code !== 0 ? $condition['dz_code'] = $dz_code : $condition['barcode'] = $barcode;

        $params = $this->getQueryParams();//分页,排序,查询参数

        $list = Lend::getPageList($condition, $params->limit, $params->order);
        $count = Lend::where($condition)->count();
        return $this->echoPageData($list, $count);
    }

    /**
     *获取读者信息
     */
    public function getDzInfoAction()
    {
        try{
        $result = $this->_dzInfo();
        if ($result['code'] !== 1){
            $this->error($result['msg']);
        }
        $this->success($result['msg'],'',$result['data']);
        }catch (Exception $e){
            $this->error($e->getMessage());
        }
    }


    /**
     *获取图书信息
     */
    public function getBookInfoAction()
    {
        try{
            $result = $this->_bookInfo();
            if ($result['code'] !== 1){
                $this->error($result['msg']);
            }
            $this->success($result['msg'],'',$result['data']);
        }catch (Exception $e){
            $this->error($e->getMessage());
        }

    }

    /**
     * 借书
     */
    public function lendBookAction()
    {
        try{
            $dz_return = $this ->_dzInfo();
            if ($dz_return['code'] !== 1){
                $this->error($dz_return['msg']);
            }

            $book_return = $this ->_bookInfo();
            if ($book_return['code'] !== 1){
                $this->error($book_return['msg']);
            }
            $lend_model = new Lend();

            $dz_info = $dz_return['data'];
            $book_info = $book_return['data'];
            $dz_info["admin_tsg_code"] = $this->adminInfo["tsg_code"];
            $dz_info["admin_info"] = $this->adminInfo;

            Reser::clearTimeout();
            LendReser::clearTimeout();
            Db::startTrans();
            $is_success = $lend_model->lend($dz_info,$book_info);

            if ($is_success === false) {
                Db::rollback();
                $this->error($lend_model->getError());
            }
            Db::commit();
            $this->success($is_success,'',$dz_info['dz_code']);
        }catch (Exception $e){
            Db::rollback();
            $this->error($e->getMessage());
        }

    }

    /**
     * @return array
     * @throws \think\exception\DbException
     * 获取读者信息公用方法
     */
    private function _dzInfo(){
        $dz_code = input('get.dz_code/d');
        $is_no_card = input('get.is_no_card/d') ?: 0;
        $dz_pwd = input('get.dz_pwd/d');
        $query = input('get.query/d') ?: 0;
        $is_finance = input('get.is_finance/d');

        $where['dz_code'] = $dz_code;
        if ($is_finance === 1){
            $field = 'dz_id,portrait,dz_code,dz_type_code,real_name,unit_name,dz_status,end_time,tsg_code';
        }else{
            $field = "dz_id,portrait,tsg_code,dz_code,dz_type_code,real_name,unit_name,pwd,curr_lend_num,lend_num,email,phone_mob,integral,dz_status,owe_money,end_time,curr_inter_lend_num,curr_lend_reser_num";
        }

        $dz_info = Dzgl::field($field)->where($where)->find();



//        $this->error($dz_info);
        if (empty($dz_info)) {
//            $this->error('无效的读者证号');
            return $this->formatReturn('无效的读者证号');
        }

        $dz_info['portrait']  = get_img_full_path($dz_info['portrait']);

        if ($is_no_card) {
            if (md5($dz_pwd) != $dz_info["pwd"]) {
//                $this->error('读者证密码错误!');
                return $this->formatReturn('读者证密码错误!');
            }
        }

        if ($is_finance === 1){
            $where = [
                'tsg_code' => $dz_info['tsg_code'],
                'dz_type_code' => $dz_info['dz_type_code']
            ];
            $dz_info['dz_type_name'] = DzType::where($where)->value('dz_type_name');
            return $this ->formatReturn('读者查询成功',1,$dz_info);
        }

        $dz_type_model = Loader::model('dzType');
        $dz_type_info = $dz_type_model ->isDzType($dz_info['tsg_code'],$dz_info['dz_type_code'],$this->adminInfo['tsg_code']);
        if ($dz_type_info === false){
//            $this->error($dz_type_model->getError());
            return $this->formatReturn($dz_type_model->getError());
        }
        $dz_info["dz_type_name"] = $dz_type_info["dz_type_code"] . "|" . $dz_type_info["dz_type_name"];

        if ($query !== 1 && $is_finance !== 1) {
            if ($dz_info['dz_status'] != '有效') {
//                $this->error('读者证状态' . $dz_info['dz_status'] . '，无法借书！');
                return $this->formatReturn('读者证状态' . $dz_info['dz_status'] . '，无法借书！');
            }

            if ($dz_info->getData('end_time') < time()) {
                $dz_info::update(['dz_status' => '暂停'], ['dz_id' => $dz_info['dz_id']]);
//                $this->error('读者证已过有效期');
                return $this->formatReturn('读者证已过有效期');
            }
        }


        $tsg_model = Loader::model("Tsg");
        $dz_info["tsg_name"] = $tsg_model->getFieldByTsgCode($dz_info['tsg_code'],'tsg_name');

        $dz_info["max_lend_num"] = $dz_type_info["max_lend_num"];
        $dz_info["inter_lend_num"] = $dz_type_info["inter_lend_num"];
        $dz_info['is_out_can'] = $dz_type_info['is_out_can'];
        $dz_info['lend_money_limit'] = $dz_type_info['lend_money_limit'];
        $dz_info['is_no_card'] = $is_no_card;

        if (0 < $dz_type_info["lend_money_limit"]) {
            $where_lend = [
                'dz_id' => $dz_info['dz_id'],
                'lend_status' => Lend::LEND_STATUS_ON
            ];
            $lend_amount = Lend::where($where_lend)->sum("price");
            $lend_amount = ($lend_amount ? $lend_amount : 0);
            $dz_info["money_limit"] = $lend_amount.'/'.$dz_type_info["lend_money_limit"];
        }
        else {
            $dz_info["money_limit"] = "不限";
        }
//        $this->success('读者信息显示成功','',$dz_info);
        return $this->formatReturn('读者信息显示成功',1,$dz_info);
    }

    /**
     * @return array
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 获取图书信息公有方法
     */
    private function _bookInfo()
    {
        $barcode = input('get.barcode');
        $is_history = input('get.is_history/d');

        if (empty($barcode)) {
            return $this->formatReturn('图书条码为空');
//            $this->error('图书条码为空');
        }


        $where = [
            'tsg_code' => $this->adminInfo['tsg_code'],
            'barcode'  => $barcode
        ];

        $field = 'dck_id,barcode,book_id,tsg_site_code,lt_type,calino,price,status,price_sum,tsg_code,tsg_code_has,status';
        $dck_info = Dck::field($field)->where($where)->find();



        if (empty($dck_info)) {
            return $this->formatReturn('无图书条码信息');
//            $this->error('无图书条码信息');
        }

        $dck_info = $dck_info->toArray();

        $field = "book_id,title,clc,isbn,firstauthor,publisher,bl_title,othertitle,fjno,fjtitle";
        $where_book = [
            'book_id' => $dck_info['book_id']
        ];
        $book_info = Book::field($field)->where($where_book)->find();
        if (empty($book_info)) {
//            $this->error('无效的图书条码');
            return $this->formatReturn('无效的图书条码');
        }

        if ($is_history !== 1){
            $book_info = $book_info ->toArray();
            $book_info = array_merge($book_info,$dck_info);
        }else{
            $book_info['barcode'] = $barcode;
            unset($book_info['book_id']);
//            $book_info['status'] = $dck_info['status'];
            unset($book_info['firstauthor']);
            $book_info['title'] = Book::getFullTitle($book_info);
            unset($book_info['bl_title']);
            unset($book_info['othertitle']);
            unset($book_info['fjno']);
            unset($book_info['fjtitle']);
        }

        $book_info["status"] = $dck_info["status"];
        $book_info["price"] = $dck_info["price"];
//        $book_info["dck_id"] = $dck_info["dck_id"];
//        $this->success('获取图书信息成功','',$book_info);
        return $this->formatReturn('获取图书信息成功', 1,$book_info);
    }


    /**
     * 还书
     */
    public function reBookAction()
    {
        try{
            $lend_id = input('lend_id');
            $lend_model = new Lend();
            Db::startTrans();
            $is_success = $lend_model->rebook($this->adminInfo["tsg_code"], $lend_id, "在架", time());
            $book_info = $lend_model->book_info_rebook;
            $is_reserve = '';
            $msg = '';

            if ($is_success !== false) {
                if ($is_success === 1) {
                    $is_reserve = $lend_model->getError();
                } else {
                    $msg = $book_info['reser_keep_info']['reser_msg'];
                }

                $op_desc = '[#],读者姓名:[' . $book_info['real_name'];
                $op_desc .= '],读者证号[' . $book_info['dz_code'];
                $op_desc .= '],书名[' . $book_info['title'];
                $op_desc .= '],图书条码[' . $book_info['barcode'] . ']';
                $param = [
                    'book_id' => $book_info['book_id'],
                    'dck_id' => $book_info['dck_id'],
                    'db1' => $book_info['dz_code'],
                    'db2' => $book_info['title'],
                    'op_desc' => $op_desc
                ];
                $is_success = LtLog::addLog(2, $this->adminInfo, $param);
                if ($is_success === false) {
                    Db::commit();
                    $this->success("归还成功:日志记录失败" . $is_reserve . $msg, '', $book_info);
                }
                Db::commit();
                $this->success('归还成功:日志记录成功' . $is_reserve . $msg, '', $book_info);
            }
            Db::rollback();
            $this->error('归还失败:' . $lend_model->getError());
        }catch (Exception $e){
            Db::rollback();
            $this->error($e->getMessage());
        }

    }


    /**
     * 续借
     */
    public function keepBookAction()
    {
        try{
            $lend_id  = input('lend_id/d');

            if (empty($lend_id)){
                $this->error('图书借阅id不存在');
            }

//        return dump($barcode);
            Db::startTrans();
            $lend_model = new Lend();
            $lend_info = $lend_model->keepBook($lend_id);
            if ($lend_info === false){
                Db::rollback();
                $this->error($lend_model->getError());
            }

            $op_desc  = '[#],读者姓名:['.$lend_info['real_name'];
            $op_desc .= '],读者证号['.$lend_info['dz_code'];
            $op_desc .= '],书名['.$lend_info['title'];
            $op_desc .= '],图书条码['.$lend_info['barcode'].']';
            $param = [
                'book_id' => $lend_info['book_id'],
                'dck_id'  => $lend_info['dck_id'],
                'db1'     => $lend_info['dz_code'],
                'db2'     => $lend_info['title'],
                'op_desc' => $op_desc
            ];
            $is_success = LtLog::addlog(3, $this->adminInfo, $param);
            if ($is_success === false){
                Db::rollback();
                $this->error('续借失败:日志记录失败');
            }
            Db::commit();
            $this->success('续借成功,续借后还书日期['.$lend_info['must_time'].']','',$lend_info);
        }catch (Exception $e){
            Db::rollback();
            $this->error($e->getMessage());
        }

    }

    /**
     * 异步获取----阅览室
     */
    public function readRoomListAction()
    {
        $condition = ['tsg_code' => $this->adminInfo['tsg_code']];

        $params = $this->getQueryParams();//分页,排序,查询参数
        if ($params->search) {
            foreach ($params->search as $search) {
                if ($search['field'] == 'tsg_site_code' || $search['field'] == 'lt_status'){
                    $condition[$search['field']] = $search['value'];
                }else{
                    $condition[$search['field']] = ['like', '%' . $search['value'] . '%'];
                }
            }
        }
        $list = RoomLend::getPageList($condition, $params->limit, $params->order);
        $count = RoomLend::where($condition)->count();
        return $this->echoPageData($list, $count);
    }

    /**
     * @return \think\response\View
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 阅览室主页面
     */
    public function readroomAction()
    {
        $this->assign('tsg_lists',TsgSite::getMap('tsg_site_code','site_name',$this->adminInfo['tsg_code']));
        $this->assign('status_lists',RoomLend::getType());
        return view();
    }

    /**
     * @return string
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 阅览--流通主页面
     */
    public function roomLtAction()
    {
        $this->assign('tsg_lists',TsgSite::getMap('tsg_site_code','site_name',$this->adminInfo['tsg_code']));
        return $this->view->fetch('room_lt');
    }

    /**
     * 阅览室签到
     */
    public function addRoomLtAction()
    {
        try{
            $dz_code = input('post.dz_code/d');
//        $lt_status = input('post.lt_status/d');
            $tsg_site_code = input('post.tsg_site_code');
//        $tsg_site_arr = explode(',', $tsg_site_lists);

            $where = [
                'tsg_code' => $this->adminInfo['tsg_code'],
                'dz_code'  => $dz_code
            ];

            $dz_info = Dzgl::get($where);

            if (!$dz_info) {
                $this->error('签到失败:系统未找到读者信息');
            }

            $dz_info['portrait'] = get_img_full_path($dz_info['portrait']);
            $ret_info["dz"] = $dz_info;
            $this->readRoomClear();

            $where = [
                'tsg_code' => $this->adminInfo['tsg_code'],
                'dz_code'  => $dz_code,
                'lt_status'=> RoomLend::LT_STATUS_ON
            ];
            $lend_info = RoomLend::get($where);

            if ($lend_info) {
                $this->error('签到失败:读者已签到,无法重复签到','',$ret_info['dz']);
            }

            if ($dz_info["dz_status"] != "有效") {
                $this->error('签到失败:读者证当前状态:【'.$dz_info['dz_status'].'无法签到','',$ret_info['dz']);
            }

            $where = [
                'tsg_code' => $this->adminInfo['tsg_code'],
                'tsg_site_code' => $tsg_site_code
            ];
            $tsg_site_info = TsgSite::get($where);

            if (!$tsg_site_info) {
                $this->error('签到失败:系统未找到馆藏地址信息');
            }

            $tsg_info = Tsg::get(['tsg_code'=>$this->adminInfo['tsg_code']]);
            $add_data = array(
                "tsg_code" => $this->adminInfo["tsg_code"],
                "tsg_site_code" => $tsg_site_info["tsg_site_code"],
                "site_name" => $tsg_site_info["site_name"],
                "op_user" => $this->adminInfo["user_name"],
                "dz_id" => $dz_info["dz_id"],
                "dz_code" => $dz_info["dz_code"],
                "real_name" => $dz_info["real_name"],
                "lt_status" => RoomLend::LT_STATUS_ON,
                "beg_time" => time());

            if ($tsg_info["room_mode"] == 2) {
                $add_data["lt_status"] = RoomLend::LT_STATUS_FINISH;
                $add_data["lt_time"] = 60;
                $add_data["end_time"] = $add_data["beg_time"] + $add_data["lt_time"];
            }

            $is_success = RoomLend::create($add_data)->result;

            if ($is_success === false) {
                $this->error('签到失败:数据库新增失败');
            }
            $this->success('签到成功','',$ret_info['dz']);
        }catch (Exception $e){
            $this->error($e->getMessage());
        }

    }

    /**
     * 阅览室签退
     */
    public function editRoomLtAction()
    {
        try{
            $tsg_info = Tsg::get(['tsg_code'=>$this->adminInfo['tsg_code']]);

            if ($tsg_info["room_mode"] == 2) {
                $this->adminInfo['签退失败:阅览室当前模式为计次模式,无法签退'];
            }

            $dz_code = input('post.dz_code/d') ?: '';

            if (!$dz_code) {
                $this->error('签退失败:无效的读者证号');
            }

            $where = [
                'tsg_code' => $this->adminInfo['tsg_code'],
                'dz_code'  => $dz_code
            ];
            $dz_info = Dzgl::get($where);

            if (!$dz_info) {
                $this->error('签退失败:系统未找到读者信息');
            }

            $this->readRoomClear();
            $where = [
                'tsg_code' => $this->adminInfo['tsg_code'],
                'dz_code'  => $dz_code,
                'lt_status'=> RoomLend::LT_STATUS_ON
            ];
            $lend_info = RoomLend::get($where);

            if (!$lend_info) {
                $this->error('签退失败:读者未签到,无法签退');
            }



            $time_now = time();
            $data = array(
                "lt_status" => RoomLend::LT_STATUS_FINISH,
                "lt_time" => $time_now - $lend_info->getData('beg_time'),
                "end_time" => $time_now);
            $is_success = RoomLend::update($data,['room_lend_id'=>$lend_info['room_lend_id']])->result;

            if ($is_success === false) {
                $this->error('签退失败:数据库更新失败');
            }
            $this->success('签退成功');
        }catch (Exception $e){
            $this->error($e->getMessage());
        }

    }

    /**
     * 清除过期签到 --- 每天一清
     */
    private function readRoomClear()
    {
        $time_now = strtotime(date("Y-m-d",time()) . " 00:00:00");
        $sql = "update lib_room_lend set end_time=beg_time,lt_time=0,lt_status=" . RoomLend::LT_STATUS_FINISH . " where beg_time<$time_now AND lt_status=" . RoomLend::LT_STATUS_ON;
        RoomLend::query($sql);
    }

    /**
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 邮件发送获取超期信息
     */
    public function getinfoAction()
    {
        $lend_id = input('pkey_id/d',0);
        $fields = "lend_id,dz_code,barcode,real_name,unit_name,title,must_time,email,phone_mob";
        $where = [
            'tsg_code' => $this->adminInfo['tsg_code'],
            'lend_id' => $lend_id
        ];
        $lend_info = Lend::field($fields)->where($where)->find();

        if (!$lend_info) {
            $this->error('not_found_data');
        }

        $lend_info["mustdate"] = $lend_info["must_time"];
        $lend_info['dzname'] = $lend_info['real_name'];
        $lend_info['unitname'] = $lend_info['unit_name'];
        unset($lend_info['real_name']);
        unset($lend_info['unit_name']);
        unset($lend_info["must_time"]);
        $this->success('', '', $lend_info);
    }

    /**
     * 缓存 --- excel
     */
    public function export_excel_timeoutAction()
    {
        $list = cache('timeout_data') ?: [];
        cache('timeout_data', null);
        $this->export_excel($list);
        exit();
    }

    /**
     * @param $datalist
     * 导出excel
     */
    private function export_excel($datalist)
    {
        import("phpExport\phpExport",EXTEND_PATH,'.class.php');
        $exporter = new \ExportDataExcel("browser", "chaoqi_excel.xls");
        $exporter->initialize();
        $fields = array("dz_code" => l("dz_code"), "real_name" => l("real_name"), "title" => l("title"), "barcode" => l("barcode"), "calino" => l("calino"), "price" => l("price"), "tsg_site_code" => l("tsg_site_code"), "site_name" => l("site_name"), "unit_name" => l("unit_name"), "add_time" => l("add_time"), "must_time" => l("must_time"));

        $head_list = array();

        foreach ($fields as $item ) {
            $head_list[] = $item;
        }

        $exporter->addRow($head_list);

        foreach ($datalist as $item ) {
            $data_row = array();

            foreach ($fields as $key1 => $item1 ) {
                $val_tmp = (isset($item[$key1]) ? $item[$key1] : "");
                $data_row[] = $val_tmp;
            }

            $exporter->addRow($data_row);
        }

        $exporter->finalize();
        exit();
    }


}