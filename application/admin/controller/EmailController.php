<?php
/**
 * Created by PhpStorm.
 * User: void
 * Date: 2018/4/10
 * Time: 10:24
 */

namespace app\admin\controller;


use app\admin\model\Email;
use app\admin\model\EmailTpl;
use app\admin\model\Lend;
use app\admin\model\Reser;
use app\admin\model\SmsTpl;
use app\admin\model\Tsg;
use think\Db;
use think\Exception;
use think\Lang;
use think\Loader;

class EmailController extends BaseController
{

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        Lang::load([APP_PATH . 'lang' . DS . 'zh-cn' . DS . 'home/email.php']);
    }

    /**
     * @return \think\response\View
     * 邮箱主页面
     */
    public function indexAction()
    {
        $status_lists = Email::get_status_list();
        $this->assign('status_lists',$status_lists);
        return view();
    }

    /**
     * @return string
     * 邮箱模板页面
     */
    public function tplAction()
    {
        $status_lists = EmailTpl::get_tpl_type_list();
        $this->assign('status_lists',$status_lists);
        return view();
    }


    /**
     * 异步获取数据
     */
    public function getListAction()
    {
        $source = input('source', 'email');
        $condition = [];
        $condition['tsg_code'] = $this->adminInfo['tsg_code'];
        $param = $this->getQueryParams();
        if ($param->search){
            foreach ($param->search as $search){
                switch ($search->field){
                    case 'send_status':
                        $condition[$search['field']] = $search['value'];
                        break;
                    case 'tpl_type':
                        $condition[$search['field']] = $search['value'];
                        break;
                    default :
                        $condition[$search['field']] = ['like',['%'.$search['value'].'%']];
                }

            }
        }

        if ($source === 'email'){
            $list = Email::getPageList($condition, $param->limit, $param->order);
            $count = Email::getCount($condition);
        }else{
            $list = EmailTpl::getPageList($condition, $param->limit, $param->order);
            $count = EmailTpl::getCount($condition);
        }

        return $this->echoPageData($list,$count);
    }

    /**
     * @return string
     * @throws Exception
     * 邮件信息查看
     */
    public function showAction()
    {
//        header("Content-Type:text/html;charset=utf-8");
        $email_id = input('email_id/d');
        $email_info = Email::get($email_id);
        if ($email_info['send_log']){
            $email_info["send_log"] = nl2br(implode("\\r\\n", unserialize($email_info["send_log"])));
        }
        $status_list = Email::get_status_list();
        $email_info['send_status'] = $status_list[$email_info['send_status']];
        $this->assign("info", $email_info);
        return view();
    }


    /**
     * 发送邮件
     * @return \think\response\View
     * @throws \PHPMailer\PHPMailer\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     *
     */
    public function sendmailAction()
    {
        $where['tsg_code'] = $this->adminInfo['tsg_code'];
        $config_info = Tsg::field("email_cnf")->where($where)->find();
        $config_info = unserialize($config_info["email_cnf"]);
//        header("Content-Type:text/html;charset=utf-8");

        if (!$this->request->isPost()) {
            if (!$config_info || empty($config_info["smtp_host"]) || empty($config_info["from_email"]) || empty($config_info["from_name"])) {
                $this->alertMsg('Email未配置,请先配置Email参数并保存!');
            }
            $email_tpl_lists = EmailTpl::get_list($this->adminInfo['tsg_code']);
            $this->assign("email_tpl_lists", $email_tpl_lists);
            $this->assign("info", $config_info);
            return view();
        }
        try {
        $data = $this->request->post();

        $reser_id = input('reser_id/d',0);
        if (!$config_info || empty($config_info["smtp_host"]) || empty($config_info["from_email"]) || empty($config_info["from_name"])) {
            $this->error('Email未配置,请先配置Email参数并保存!');
        }
        $result = $this->validate($data,'Email.add');
        if ($result !== true){
            $this->error($result);
        }
        $mod_email = new Email();
        $add_data = $mod_email->genData($this->adminInfo["tsg_code"], $data, $this->adminInfo["user_name"]);

        if ($add_data === false) {
            $this->error('邮件发送失败,生成邮件数据时遇到错误:'.$mod_email->getError());
        }

        $email_info = Email::create($add_data);

            if ($email_info->result === false) {
                $this->error('邮件发送失败,添加邮件数据出现错误');
            }

            $is_success = $mod_email->send($this->adminInfo["tsg_code"], $email_info);

            if ($is_success === true) {
                Email::setOk($email_info['email_id']);
                Email::addLog($email_info['email_id'],"邮件发送成功  操作用户:" . $this->adminInfo["user_name"]);
                if ($reser_id){
                    Reser::onNotice($this->adminInfo['tsg_code'], $reser_id);
                }
                $this->success('邮件发送成功');
            } else {
                Email::setErr($email_info['email_id']);
                Email::addLog($email_info['email_id'],"邮件发送失败  操作用户:" . $this->adminInfo["user_name"]);
                $this->error('邮件发送失败:'. $mod_email->getError());
            }
        }
        catch (Exception $e){
            $this->error($e->getMessage());
        }
    }

    /**
     * 解析模板字段
     */
    public function loadtplAction()
    {
        try {
            $email_tpl_id = input('get.email_tpl_id/d', 0);
            if (empty($email_tpl_id)) {
                $this->error('id为空');
            }

            $email_tpl_info = EmailTpl::field("tpl_subject,tpl_body,tpl_type")->where(['email_tpl_id' => $email_tpl_id])->find();

            if (empty($email_tpl_info)) {
                $this->error('未找到模板');
            }
            $label_list = EmailTpl::get_lable_list($email_tpl_info->getData('tpl_type'));
            $label_list = array_keys($label_list);
            $data = input('data/a',[]);
            $zd = array_keys($data);
            $val = array_values($data);
            $ext_data = array("tsg" => $this->_user_info["tsg_name"], "date" => date("Y-m-d"));

            foreach ($zd as $key => $item) {
                $tmp_zd = "{" . $item . "}";
                $tmp_str = (isset($val[$key]) ? trim($val[$key]) : "");

                if (in_array($tmp_zd, $label_list)) {
                    $ext_data[$item] = $tmp_str;
                }
            }
            EmailTpl::parseTpl($email_tpl_info, $ext_data, $email_tpl_info->getData('tpl_type'));

            $this->success('', '', $email_tpl_info);
        }catch (Exception $e){
            $this->error($e->getMessage());
        }
    }

    /**
     * 模板默认渲染页面
     * @param int $tpl_type
     */
    protected function assignTpl($tpl_type=0)
    {
        $tpl_type_lists = EmailTpl::get_tpl_type_list();
        $this->assign("tpl_type_lists", $tpl_type_lists);
        $tpl_label_lists = EmailTpl::get_lable_list($tpl_type);
        $this->assign("tpl_label_lists", $tpl_label_lists);
    }

    /**
     * 根据ajax传输模板类型获取标签数组
     */
    public function getLabelListsAction()
    {
        $tpl_type = input('get.tpl_type/d',0);
//        return $this->formatReturn(true,'ok',$tpl_type);
        $label_lists = EmailTpl::get_lable_list($tpl_type);
        $this->success('','',$label_lists);
    }

    /**
     * @return \think\response\View
     * @throws \think\exception\DbException
     * 模板编辑
     */
    public function edittplAction()
    {

        if (!$this->request->isPost()) {
            $email_tpl_id = input('get.email_tpl_id/d');

            if (empty($email_tpl_id)){
                $this->alertMsg('模板id不存在');
            }

            $email_tpl_info = EmailTpl::get($email_tpl_id);

            if (!$email_tpl_info) {
                $this->alertMsg('模板不存在');
            }

            if ($email_tpl_info["tsg_code"] != $this->adminInfo["tsg_code"]) {
                $this->alertMsg('不是本馆邮件模板，无权操作');
            }
            $this->assignTpl($email_tpl_info->getData('tpl_type'));
            $this->assign("info", $email_tpl_info);
            return view('edit');
        }
        try {
            $save_data = $this -> request->post();

            $result = $this -> validate($save_data,'Email.tpl');
            if ($result !==true){
                $this->error($result);
            }


            if (!empty($save_data["tpl_type"])) {
                if (!EmailTpl::unique($this->adminInfo["tsg_code"], $save_data["tpl_type"], $save_data['email_tpl_id'])) {
                    $this->error('此模板类型已存在');
                }
            }

            $where= [];
            $where['email_tpl_id'] = $save_data['email_tpl_id'];
            $where['tsg_code'] = $this->adminInfo['tsg_code'];

            unset($save_data['email_tpl_id']);

            $is_success = EmailTpl::update($save_data,$where,true)->result;

            if ($is_success !== false) {
                $this->success('保存成功');
            }
            else {
                $this->error('保存失败!');
            }
        }catch (Exception $e){
            $this->error($e->getMessage());
        }

    }

    /**
     * @return string
     * @throws Exception
     * 模板添加
     */
    public function addtplAction()
    {
        if (!$this->request->isPost()) {
            $this->assignTpl();
            return $this->view->fetch('edit');
        }
       try {
            $add_data = $this -> request ->post();


            $result = $this -> validate($add_data,'Email.tpl');
            if ($result !==true){
                $this->error($result);
            }


            if (!empty($add_data["tpl_type"])) {
                if (!EmailTpl::unique($this->adminInfo["tsg_code"], $add_data["tpl_type"])) {
                    $this->error('此模板类型已存在');
                }
            }

            $add_data["tsg_code"] = $this->adminInfo["tsg_code"];
            $is_success = EmailTpl::create($add_data,true)->result;

            if ($is_success !== false) {
                $this->success('新增成功！');
            }
            else {
                $this->error('新增失败！');
            }
        }catch (Exception $e){
           $this->error($e->getMessage());
       }
    }

    /**
     * 模板删除
     */
    public function droptplAction()
    {
        try{
            $email_tpl_id = input('email_tpl_id/d');
            $email_tpl_info = EmailTpl::get($email_tpl_id);

            if (!$email_tpl_info) {
                $this->error('模板数据不存在');
            }

            if ($email_tpl_info["tsg_code"] != $this->adminInfo["tsg_code"]) {
                $this->error('不是本馆邮件模板，无权操作');
            }

            $is_success = $email_tpl_info::destroy($email_tpl_id);

            if ($is_success) {
                $this->success('删除成功！');
            }
            else {
                $this->error('删除失败！');
            }
        }catch (Exception $e){
            $this->error($e->getMessage());
        }

    }

    /**
     * @return \think\response\View
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 邮箱配置页面
     */
    public function configAction()
    {
        $where['tsg_code'] = $this->adminInfo['tsg_code'];

        if ($this->request->isPost()) {
            try{
                $data = $this->request->post();

                $add_data = array(
                    "smtp_host" => isset($data["smtp_host"]) ? trim($data["smtp_host"]) : "",
                    "smtp_port" => isset($data["smtp_port"]) ? trim($data["smtp_port"]) : "",
                    "smtp_user" => isset($data["smtp_user"]) ? trim($data["smtp_user"]) : "",
                    "smtp_pass" => isset($data["smtp_pass"]) ? trim($data["smtp_pass"]) : "",
                    "from_name" => isset($data["from_name"]) ? trim($data["from_name"]) : "",
                    "reply_email" => isset($data["reply_email"]) ? trim($data["reply_email"]) : "",
                    "reply_name" => isset($data["reply_name"]) ? trim($data["reply_name"]) : "",
                    "from_email" => isset($data["from_email"]) ? trim($data["from_email"]) : "",
                    "test_email" => isset($data["test_email"]) ? trim($data["test_email"]) : ""
                );


                $result = $this->validate($data,'Email.config');
                if ($result !== true){
                    $this->error($result);
                }

                $is_email = (isset($data["is_email"]) ? intval($data["is_email"]) : 0);
                $save_data = array("email_cnf" => serialize($add_data), "is_email" => $is_email);
                $is_success = Tsg::update($save_data,$where,true)->result;

                if ($is_success === false) {
                    $this->error('保存邮箱配置失败');
                }
                $this->success('保存邮箱配置成功！');
            }catch (Exception $e){
                $this->error($e->getMessage());
            }
        }
        $tsg_info = Tsg::field("email_cnf,is_email")->where($where)->find();
        $smtp_port_list = [465,25];
        $config_info = unserialize($tsg_info["email_cnf"]);
        $config_info['is_email'] = isset($tsg_info['is_email']) ? $tsg_info['is_email'] : 0;
        $this->assign("info", $config_info);
        $this->assign('smtp_port_list', $smtp_port_list);
        return view();
    }

    /**
     * @throws \PHPMailer\PHPMailer\Exception
     * 测试邮箱配置是否可用
     */
    public function testAction()
    {
        try{
            $to_email = input('get.to_email');

            if (!$to_email) {
                $this->error('测试的Email地址不能为空');
            }

            $where['tsg_code'] = $this->adminInfo['tsg_code'];


            $email_info = array(
                "subject" => "weblib测试邮件",
                "email_body" => "这是一封测试邮件,如收到说明Email参数配置成功!",
                "to_email" => $to_email,
                "to_name" => $to_email
//            "from_email" => $config_info["from_email"],
//            "from_name" => $config_info["from_name"]
            );

            $email_model = new Email();
            $is_success = $email_model->send($this->adminInfo['tsg_code'], $email_info);
            if ($is_success === false) {
                $this->error('测试邮件发送失败:' . $email_model->getError());
            }
            $this->success('测试邮件发送成功');
        }catch (Exception $e){
            $this->error($e->getMessage());
        }

    }

    public function sendnoticeAction()
    {
        $tpl_type = input('tpl_type/d',0);
        $email_tpl_id = EmailTpl::where(['tsg_code'=>$this->adminInfo['tsg_code'],'tpl_type'=>$tpl_type])->value('email_tpl_id');
        $notice_type_list = EmailTpl::get_notice_type_list();
        $this->assign("email_tpl_id", $email_tpl_id);
        $this->assign("notice_type_list", $notice_type_list);
        return view();
    }

    public function sendnotice_batchAction()
    {
        //REG
        $pkey_ids = input('get.pkey_ids/s',0);
        $tpl_type = input('get.tpl_type/d', 0);

        $pkey_ids = ($pkey_ids ? preg_replace("/[^0-9,]/", "", $pkey_ids) : "0");

        if (empty($pkey_ids)){
            $this->alertMsg('id不存在');
        }

        if ($tpl_type == EmailTpl::TPL_TYPE_RESER) {
            $field = [
                'reser_id'=>'pkey_id',
                'dz_code','real_name'=>'to_name',
                'phone_mob'=>'to_mob','email'=>'to_email','barcode','title','must_time','unit_name'];
            $where = [
                'tsg_code'=>$this->adminInfo['tsg_code'],
                'reser_id' => ['in',$pkey_ids],
                'reser_status' => ['in',[Reser::RESER_STATUS_BOOK,Reser::RESER_STATUS_NOITE]]
            ];
            $item_List = Reser::field($field)->where($where)->select();
            foreach ($item_List as $key => $item ) {
                $item_List[$key]["ext_data"] = array(
                    "barcode" => $item["barcode"],
                    "title" => $item["title"],
                    "mustdate" =>$item["must_time"],
                    "dzname" => $item["to_name"],
                    "unitname" => $item["unit_name"]);
            }
            $this->_parseTpl($tpl_type, $item_List);
            $this->assign("item_list", $item_List);
        }
        else if ($tpl_type == EmailTpl::TPL_TYPE_LEND_OUT) {
            $field = [
                'lend_id'=>'pkey_id',
                'dz_code','real_name'=>'to_name',
                'phone_mob'=>'to_mob','email'=>'to_email','barcode','title','must_time','unit_name'];

            $where = [
                'tsg_code' => $this->adminInfo['tsg_code'],
                'lend_id' => ['in',$pkey_ids],
                'lend_status' => Lend::LEND_STATUS_ON
            ];
            $item_List = Lend::field($field)->where($where)->select();

            foreach ($item_List as $key => $item ) {
                $item_List[$key]["ext_data"] = array("barcode" => $item["barcode"],
                    "title" => $item["title"],
                    "mustdate" => $item["must_time"],
                    "dzname" => $item["to_name"],
                    "unitname" => $item["unit_name"]);
            }

            $this->_parseTpl($tpl_type, $item_List);
            $this->assign("item_list", $item_List);
        }

        $templateid = SmsTpl::where(['tpl_type'=>$tpl_type,'tsg_code'=>$this->adminInfo['tsg_code']])->value('templateid');
        $this->assign('templateid',$templateid);
            $notice_type_list = EmailTpl::get_notice_type_list();
            $this->assign("notice_type_list", $notice_type_list);
            return view();
    }

    /**
     * @param $tpl_type
     * @param $data_list
     * @throws @\think\db\exception\DataNotFoundException
     * @throws @\think\db\exception\ModelNotFoundException
     * @throws @\think\exception\DbException
     * 模板解析
     */
    public function _parseTpl($tpl_type, &$data_list)
    {
        $email_tpl_info = EmailTpl::field("tpl_subject,tpl_body,tpl_type")->where(['tpl_type'=>$tpl_type])->find();
        $ext_data = array("tsg" => $this->_user_info["tsg_name"], "date" => date("Y-m-d"));

        foreach ($data_list as $key => $item ) {
            $ext_data_tmp = array_merge($ext_data, $item["ext_data"]);
            EmailTpl::parseTpl($email_tpl_info, $ext_data_tmp, $tpl_type);
            $data_list[$key]["email_subject"] = $email_tpl_info["tpl_subject"];
            $data_list[$key]["email_body"] = $email_tpl_info["tpl_body"];
            unset($data_list[$key]['ext_data']);
        }
    }

}